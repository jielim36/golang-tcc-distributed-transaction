syntax = "proto3";

package rpc_server;

option go_package = "./proto";

// Transaction Types Enum
enum TCC_EVENTS {
    UNKNOWN = 0;
    UPGRADE_SUBSCRIPTION = 1;
    DEPOSIT = 2;
    WITHDRAW = 3;
    CREATE_WALLET = 4;
}

// Transaction Status
enum TransactionStatus {
    PENDING = 0;
    TRYING = 1;
    CONFIRMED = 2;
    CANCELLED = 3;
}

// Wallet Model
message Wallet {
    uint64 id = 1;
    double balance = 2;
    double frozen_balance = 3;
    string status = 4;
    string created_at = 5;
    string updated_at = 6;
}

// Transaction Model
message Transaction {
    uint64 id = 1;
    int64 wallet_id = 2;
    double amount = 3;
    string description = 4;
    string event_id = 5;  // Unique event identifier for idempotency
    string Status = 6;
    TCC_EVENTS event_type = 7;
    TransactionStatus transaction_status = 8;
    string created_at = 9;
    string updated_at = 10;
    map<string, string> metadata = 11;
}

// Transaction Service Definition
service TransactionService {
    // TCC Pattern Methods
    rpc Try(TryRequest) returns (TryResponse) {}
    rpc Confirm(ConfirmRequest) returns (ConfirmResponse) {}
    rpc Cancel(CancelRequest) returns (CancelResponse) {}
}

message DataTemplate {
    Transaction transaction = 1;
    Wallet wallet = 2;
    string userId = 3;
}

// Request
message Event {
    string event_id = 1;
    TCC_EVENTS event_type = 2;
}

message TryRequest {
    Event event = 1;
    DataTemplate data = 2;
}

message ConfirmRequest {
    Event event = 1;
}

message CancelRequest {
    Event event = 1;
}

// response
message TryResponse {
    bool success = 1;
    string message = 2;
    string event_id = 3;
    DataTemplate response = 4;
}

message ConfirmResponse {
    bool success = 1;
    string message = 2;
    DataTemplate response = 3;
}


message CancelResponse {
    bool success = 1;
    string message = 2;
    DataTemplate response = 3;
}